makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector()
a
class(a)
class(a$set)
a$set(c(1,2,3,4,5,6,7))
a$get()
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
# set the value of the matrix
set<-function(y)
x<<- y
m<<-NULL
}
# get the value of the matrix
get <- function() x
# set the inverse of the matrix
setinverse <- function(solve) m <<-solve
# get the inverse of the matrix
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# set the value of the matrix
set<-function(y){
x<<- y
m<<-NULL
}
# get the value of the matrix
get <- function() x
# set the inverse of the matrix
setinverse <- function(solve) m <<-solve
# get the inverse of the matrix
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix()
class(a)
class(a$set)
a$set(matrix(1:10, 2, 5))
a$get()
cacheSolve(a)
a$set(matrix(1:4), 2, 2)
b <-makeCacheMatrix()
class(b)
class(b$set)
b$set(matrix(1:4),2,2))
b$set(matrix(1:4,2,2))
b$get()
cacheSolve(b)
?inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cachesolve(b)
cacheSolve(b)
